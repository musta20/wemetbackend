
  
  const Socket = useContext(SocketContext);

  const { Room } = useParams();
  const {
    roomState,
    roomDispatch,
    upDateGuestList,
    mediaSoupstate,
    mediaSoupDispatch,
  } = useContext(AppContext);
  //const { adminId, IsViewer } = mediaSoupstate;
  const { guestList , adminId , IsViewer} = roomState;
  //guestList



  
  const initialMainRoomProps = {
    roomName: "",
    isPublic: true,
    isStreamed: true,
    adminId: 0,
    isAudience: false,
    guestList: [],
    isFreeToJoin: false,
  };

  const initialMediaSoupProps = {
    device: null,
    producerTransport: false,
    consumerTransports: [],
  };

  const initialMassengerProps = {
    HistoryChat: [],
    ChatMessage: "",
    PrivetMessage: "",
  };

  const [Case, setCase] = useState([
    true,
    false,
    false, //the curren case of the view
    false,
    false,
    false,
  ]);

  const [ChangeStatVale, setChangeStatVale] = useState([
    //the vlue of the css case classes
    [1, 0, 5, 4, 3, 2, 7, 6],
    [5, 2, 1, 7, 6, 0, 4, 3],
    [6, 7, 3, 2, 5, 4, 0, 1],
  ]);

  const view =
    //the array of class in each cases[
    [
      [
        "d-none",
        "col-md-6",
        "col-md-4",
        "col-md-4",
        "d-none",
        "d-none",
        "d-none",
        "col-md-4",
      ],
      [
        "d-none",
        "d-none",
        "col-md-3",
        "col-md-2",
        "col-md-3",
        "col-md-4",
        "d-none,d-none",
      ],
      [
        "col-md-7",
        "col-md-6",
        "col-md-5",
        "col-md-4",
        "col-md-6",
        "col-md-6",
        "col-md-6",
        "col-md-5",
      ],
      [
        "d-none",
        "d-none",
        "d-none",
        "col-md-2",
        "col-md-3",
        "d-none",
        "col-md-4",
        "col-md-3",
      ],
    ];

  const AddMediaStream = (userid, stream) => {
    let guestlist = [...guestList];

    for (let i = 1; i < guestlist.length; i++) {
      if (userid === adminId) {
        guestlist[0][0].current.srcObject = stream;
        guestlist[0][1] = userid;

        if (IsViewer) break;

        for (let i = 1; i < guestlist.length; i++) {
          if (guestlist[i][1] === 0) {
            guestlist[i][1] = Socket.id;
            /* 
            if (!IsViewer) {
              StartUserCamra(i);
            }
            ShowTheSideCaller(i); */
            break;
          }
        }
        break;
      }

      if (guestlist[i][1] === 0) {
        guestlist[i][0].current.srcObject = stream;
        guestlist[i][1] = userid;
        //  ShowTheSideCaller(i);
        break;
      }
    }
    upDateGuestList(guestlist, roomDispatch);
    // setGuest(guestlist);
  };

  //this function called when user quit the room
  // it will clear his postion it the guist list
  // and close the side bar
  const completeSession = (id) => {
    let GuestList = [...guestList];

    let thegustid;

    GuestList.forEach((geist, i) => {
      if (geist[1] === id) {
        console.log(i);
        geist[1] = 0;
        thegustid = i;
      }
    });

    upDateGuestList(GuestList, roomDispatch);

    // CloseTheSideCaller(thegustid);
  };
